{"version":3,"sources":["images/Itsuki.gif","components/FormIndex.js","pages/IndexPage.js","components/RootsOfEquations/Bisection.js","pages/RootsOfEquations/BisectionPage.js","components/RootsOfEquations/FalsePosition.js","pages/RootsOfEquations/FalsePositionPage.js","components/RootsOfEquations/OnePoint.js","pages/RootsOfEquations/OnePointPage.js","components/RootsOfEquations/NewtonRaphson.js","pages/RootsOfEquations/NewtonRaphsonPage.js","components/RootsOfEquations/Secant.js","pages/RootsOfEquations/SecantPage.js","components/LinearAlgebraicEquations/Cramer.js","pages/LinearAlgebraicEquations/CramerPage.js","components/LinearAlgebraicEquations/GaussElimination.js","pages/LinearAlgebraicEquations/GaussEliminationPage.js","components/LinearAlgebraicEquations/GaussJordan.js","pages/LinearAlgebraicEquations/GaussJordanPage.js","components/LinearAlgebraicEquations/LUdecomposition.js","pages/LinearAlgebraicEquations/LUdecompositionPage.js","components/LinearAlgebraicEquations/JacobiIteration.js","pages/LinearAlgebraicEquations/JacobiIterationPage.js","components/LinearAlgebraicEquations/Gaussseidel.js","pages/LinearAlgebraicEquations/GaussseidelPage.js","components/LinearAlgebraicEquations/ConjugateGradient.js","pages/LinearAlgebraicEquations/ConjugateGradientPage.js","components/InterpolationandExtrapolation/Newtondivided.js","pages/InterpolationandExtrapolation/NewtondividedPage.js","components/InterpolationandExtrapolation/Lagrangepolynomials.js","pages/InterpolationandExtrapolation/LagrangepolynomialsPage.js","components/InterpolationandExtrapolation/Splineinterpolation.js","pages/InterpolationandExtrapolation/SplineinterpolationPage.js","components/LeastSquaresRegression/LinearRegression.js","pages/LeastSquaresRegression/LinearRegressionPage.js","components/LeastSquaresRegression/PolynomialRegression.js","pages/LeastSquaresRegression/PolynomialRegressionPage.js","components/LeastSquaresRegression/MultipleLinearRegression.js","pages/LeastSquaresRegression/MultipleLinearRegressionPage.js","images/icon.png","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["FormHome","Container","className","src","Itsuki","alt","IndexPage","FormIndex","axios","require","default","Bisection","useState","xl","xr","eq","error","data","setData","results","setResults","datagraph","labels","datasets","label","fill","backgroundColor","borderColor","map","r","push","xm","fxm","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","onChange","e","target","value","parseFloat","span","offset","Button","onClick","a","post","res","console","log","JSON","parse","request","response","Table","striped","bordered","hover","variant","iteration","er","options","title","display","text","scales","yAxes","ticks","beginAtZero","BisectionPage","FalsePosition","x1","fx1","FalsePositionPage","Onepoint","x","xi","fxi","OnePointPage","OnePoint","NewtonRaphson","required","fx","diffx","NewtonRaphsonPage","Secant","x0","fx0","deltax","SecantPage","Cramer","a11","a12","a13","a21","a22","a23","a31","a32","a33","b1","b2","b3","block","CramerPage","GaussElimination","GaussEliminationPage","GaussJordan","GaussJordanPage","LUdecompositionPage","LUdecomposition","JacobiIteration","imax","x2","x3","erx1","erx2","erx3","JacobiIterationPage","Gaussseidel","GaussseidelPage","ConjugateGradient","l","toFixed","r1","r2","r3","err","a1","d1","d2","d3","ConjugateGradientPage","Newtondivided","N","setN","Nindex","setNindex","setFx","setX","y","setY","index","setIndex","ans","setAns","step","parseInt","Array","from","i","id","stringify","NewtondividedPage","Lagrangepolynomials","LagrangepolynomialsPage","Splineinterpolation","string","SplineinterpolationPage","LinearRegression","prediction","setPrediction","LinearRegressionPage","PolynomialRegression","order","setOrder","PolynomialRegressionPage","MultipleLinearRegression","MultipleLinearRegressionPage","NavBar","Navbar","bg","expand","sticky","to","Brand","icon","width","height","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","Link","Divider","inline","href","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0860c84.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Itsuki.4ffec2bc.gif\";","import { Container } from 'react-bootstrap'\r\nimport Itsuki from '../images/Itsuki.gif'\r\n\r\nconst FormHome = () => {\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-center text-white shadow\">\r\n                <h2>Itsuki is No.1 Waifu</h2>\r\n                <br />\r\n                <img src={Itsuki} alt=\"Itsuki\" className=\"rounded img-fluid\" />\r\n                <br />\r\n                <h3 className=\"mt-5\">Kittidet Cheavachirakul</h3>\r\n                <h3>6104062630174</h3>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormHome\r\n","import FormIndex from '../components/FormIndex'\r\nconst IndexPage = () => {\r\n    return (\r\n        <div>\r\n            <FormIndex />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndexPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { Line } from 'react-chartjs-2'\r\nconst axios = require('axios').default\r\n\r\nconst Bisection = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        eq: '(x^4)-13',\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    const datagraph = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'XM',\r\n                data: [],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n    results !== null &&\r\n        results.map(\r\n            (r) => (\r\n                datagraph.labels.push(r.xm),\r\n                datagraph.datasets[0].data.push(r.fxm)\r\n            )\r\n        )\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'Bisection',\r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-white shadow\">\r\n                <h2>Bisection Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"(x^4)-13\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        eq: e.target.value,\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <div>\r\n                            <Table striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Iteration</th>\r\n                                        <th>XL</th>\r\n                                        <th>XR</th>\r\n                                        <th>XM</th>\r\n                                        <th>ER</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {results.map((r) => (\r\n                                        <tr key={r.iteration}>\r\n                                            <td>{r.iteration}</td>\r\n                                            <td>{r.xl}</td>\r\n                                            <td>{r.xr}</td>\r\n                                            <td>{r.xm}</td>\r\n                                            <td>{r.er}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Line data={datagraph} options={options} />\r\n                        </div>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bisection\r\n","import Bisection from '../../components/RootsOfEquations/Bisection'\r\nconst BisectionPage = () => {\r\n    return (\r\n        <div>\r\n            <Bisection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BisectionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { Line } from 'react-chartjs-2'\r\nconst axios = require('axios').default\r\n\r\nconst FalsePosition = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        eq: '(x^4)-13',\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    const datagraph = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'X1',\r\n                data: [],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n    results !== null &&\r\n        results.map(\r\n            (r) => (\r\n                datagraph.labels.push(r.x1),\r\n                datagraph.datasets[0].data.push(r.fx1)\r\n            )\r\n        )\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'False Position',\r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-white shadow\">\r\n                <h2>False-Position Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"(x^4)-13\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        eq: e.target.value,\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/falseposition',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <div>\r\n                            <Table striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Iteration</th>\r\n                                        <th>XL</th>\r\n                                        <th>XR</th>\r\n                                        <th>X1</th>\r\n                                        <th>ER</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {results.map((r) => (\r\n                                        <tr key={r.iteration}>\r\n                                            <td>{r.iteration}</td>\r\n                                            <td>{r.xl}</td>\r\n                                            <td>{r.xr}</td>\r\n                                            <td>{r.x1}</td>\r\n                                            <td>{r.er}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Line data={datagraph} options={options} />\r\n                        </div>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FalsePosition\r\n","import FalsePosition from '../../components/RootsOfEquations/FalsePosition'\r\nconst FalsePositionPage = () => {\r\n    return (\r\n        <div>\r\n            <FalsePosition />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FalsePositionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { Line } from 'react-chartjs-2'\r\nconst axios = require('axios').default\r\n\r\nconst Onepoint = () => {\r\n    const [data, setData] = useState({\r\n        x: 0,\r\n        eq: '(1/4)+(x/2)',\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    const datagraph = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Xi',\r\n                data: [],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n    results !== null &&\r\n        results.map(\r\n            (r) => (\r\n                datagraph.labels.push(r.xi),\r\n                datagraph.datasets[0].data.push(r.fxi)\r\n            )\r\n        )\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'One Point',\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-white shadow\">\r\n                <h2>One-Point Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"(1/4)+(x/2)\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        eq: e.target.value,\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X Start :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X Start\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/onepoint',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <div>\r\n                            <Table striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Iteration</th>\r\n                                        <th>X</th>\r\n                                        <th>Xi</th>\r\n                                        <th>ER</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {results.map((r) => (\r\n                                        <tr key={r.iteration}>\r\n                                            <td>{r.iteration}</td>\r\n                                            <td>{r.x}</td>\r\n                                            <td>{r.xi}</td>\r\n                                            <td>{r.er}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Line data={datagraph} options={options} />\r\n                        </div>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Onepoint\r\n","import OnePoint from '../../components/RootsOfEquations/OnePoint'\r\nconst OnePointPage = () => {\r\n    return (\r\n        <div>\r\n            <OnePoint />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OnePointPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { Line } from 'react-chartjs-2'\r\nconst axios = require('axios').default\r\n\r\nconst NewtonRaphson = () => {\r\n    const [data, setData] = useState({\r\n        x: 0,\r\n        eq: '(x^2)-7',\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    const datagraph = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Xi',\r\n                data: [],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n    results !== null &&\r\n        results.map(\r\n            (r) => (\r\n                datagraph.labels.push(r.xi),\r\n                datagraph.datasets[0].data.push(r.fxi)\r\n            )\r\n        )\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'Newton Raphson',\r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-white shadow\">\r\n                <h2>Newton-Raphson Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"(x^2)-7\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        eq: e.target.value,\r\n                                    })\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X Start :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X Start\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/newtonraphson',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <div>\r\n                            <Table striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Iteration</th>\r\n                                        <th>Xi</th>\r\n                                        <th>FX</th>\r\n                                        <th>diff(FX)</th>\r\n                                        <th>ER</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {results.map((r) => (\r\n                                        <tr key={r.iteration}>\r\n                                            <td>{r.iteration}</td>\r\n                                            <td>{r.xi}</td>\r\n                                            <td>{r.fx}</td>\r\n                                            <td>{r.diffx}</td>\r\n                                            <td>{r.er}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Line data={datagraph} options={options} />\r\n                        </div>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewtonRaphson\r\n","import NewtonRaphson from '../../components/RootsOfEquations/NewtonRaphson'\r\nconst NewtonRaphsonPage = () => {\r\n    return (\r\n        <div>\r\n            <NewtonRaphson />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewtonRaphsonPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { Line } from 'react-chartjs-2'\r\nconst axios = require('axios').default\r\n\r\nconst Secant = () => {\r\n    const [data, setData] = useState({\r\n        x0: 1,\r\n        x1: 2,\r\n        eq: '(x^2)-7',\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    const datagraph = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Xi',\r\n                data: [],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n    results !== null &&\r\n        results.map(\r\n            (r) => (\r\n                datagraph.labels.push(r.xi),\r\n                datagraph.datasets[0].data.push(r.fxi)\r\n            )\r\n        )\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'Secant',\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-white shadow\">\r\n                <h2>Secant Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"(x^2)-7\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        eq: e.target.value,\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X0 :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X0\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x0: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X1 :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X1\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/secant',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <div>\r\n                            <Table striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Iteration</th>\r\n                                        <th>X0</th>\r\n                                        <th>X1</th>\r\n                                        <th>FX0</th>\r\n                                        <th>FX1</th>\r\n                                        <th>DeltaX</th>\r\n                                        <th>Xi</th>\r\n                                        <th>ER</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {results.map((r) => (\r\n                                        <tr key={r.iteration}>\r\n                                            <td>{r.iteration}</td>\r\n                                            <td>{r.x0}</td>\r\n                                            <td>{r.x1}</td>\r\n                                            <td>{r.fx0}</td>\r\n                                            <td>{r.fx1}</td>\r\n                                            <td>{r.deltax}</td>\r\n                                            <td>{r.xi}</td>\r\n                                            <td>{r.er}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Line data={datagraph} options={options} />\r\n                        </div>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Secant\r\n","import Secant from '../../components/RootsOfEquations/Secant'\r\nconst SecantPage = () => {\r\n    return (\r\n        <div>\r\n            <Secant />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SecantPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Cramer = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 bg-dark text-white shadow\">\r\n                <h2>Cramer's rule</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/cramer',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.x}>\r\n                                        <td>{r.x}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cramer\r\n","import Cramer from '../../components/LinearAlgebraicEquations/Cramer'\r\nconst CramerPage = () => {\r\n    return (\r\n        <div>\r\n            <Cramer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CramerPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst GaussElimination = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Gauss Elimination Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/gausselimination',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.xi}>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussElimination\r\n","import GaussElimination from '../../components/LinearAlgebraicEquations/GaussElimination'\r\nconst GaussEliminationPage = () => {\r\n    return (\r\n        <div>\r\n            <GaussElimination />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussEliminationPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst GaussJordan = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Gauss-Jordan Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/gaussjordan',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.xi}>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussJordan\r\n","import GaussJordan from '../../components/LinearAlgebraicEquations/GaussJordan'\r\nconst GaussJordanPage = () => {\r\n    return (\r\n        <div>\r\n            <GaussJordan />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussJordanPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst GaussJordan = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>LU decomposition Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/ludecomposition',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.xi}>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussJordan\r\n","import LUdecomposition from '../../components/LinearAlgebraicEquations/LUdecomposition'\r\nconst LUdecompositionPage = () => {\r\n    return (\r\n        <div>\r\n            <LUdecomposition />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LUdecompositionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst JacobiIteration = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n        imax: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Jacobi Iteration Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/jacobiiteration',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>X1</th>\r\n                                    <th>X2</th>\r\n                                    <th>X3</th>\r\n                                    <th>ErrorX1</th>\r\n                                    <th>ErrorX2</th>\r\n                                    <th>ErrorX3</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.x1}</td>\r\n                                        <td>{r.x2}</td>\r\n                                        <td>{r.x3}</td>\r\n                                        <td>{r.erx1}</td>\r\n                                        <td>{r.erx2}</td>\r\n                                        <td>{r.erx3}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JacobiIteration\r\n","import JacobiIteration from '../../components/LinearAlgebraicEquations/JacobiIteration'\r\nconst JacobiIterationPage = () => {\r\n    return (\r\n        <div>\r\n            <JacobiIteration />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JacobiIterationPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Gaussseidel = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Gauss-seidel</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/gaussseidel',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>X1</th>\r\n                                    <th>X2</th>\r\n                                    <th>X3</th>\r\n                                    <th>ErrorX1</th>\r\n                                    <th>ErrorX2</th>\r\n                                    <th>ErrorX3</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.x1}</td>\r\n                                        <td>{r.x2}</td>\r\n                                        <td>{r.x3}</td>\r\n                                        <td>{r.erx1}</td>\r\n                                        <td>{r.erx2}</td>\r\n                                        <td>{r.erx3}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gaussseidel\r\n","import Gaussseidel from '../../components/LinearAlgebraicEquations/Gaussseidel'\r\nconst GaussseidelPage = () => {\r\n    return (\r\n        <div>\r\n            <Gaussseidel />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussseidelPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst ConjugateGradient = () => {\r\n    const [data, setData] = useState({\r\n        a11: 14,\r\n        a12: 4,\r\n        a13: -16,\r\n        a21: 4,\r\n        a22: 29,\r\n        a23: -19,\r\n        a31: -16,\r\n        a32: -19,\r\n        a33: 27,\r\n        b1: -22,\r\n        b2: 35,\r\n        b3: 5,\r\n        x1: 0,\r\n        x2: 0,\r\n        x3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Conjugate Gradient Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/linearalgebraicequations/conjugategradient',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>L</th>\r\n                                    <th>X1</th>\r\n                                    <th>X2</th>\r\n                                    <th>X3</th>\r\n                                    <th>R1</th>\r\n                                    <th>R2</th>\r\n                                    <th>R3</th>\r\n                                    <th>Error</th>\r\n                                    <th>A</th>\r\n                                    <th>D1</th>\r\n                                    <th>D2</th>\r\n                                    <th>D3</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{parseFloat(r.l.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.x1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.x2.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.x3.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.r1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.r2.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.r3.toFixed(5))}</td>\r\n                                        <td>{r.err}</td>\r\n                                        <td>{parseFloat(r.a1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.d1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.d2.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.d3.toFixed(5))}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConjugateGradient\r\n","import ConjugateGradient from '../../components/LinearAlgebraicEquations/ConjugateGradient'\r\nconst ConjugateGradientPage = () => {\r\n    return (\r\n        <div>\r\n            <ConjugateGradient />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConjugateGradientPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Newtondivided = () => {\r\n    const [N, setN] = useState(0)\r\n    const [Nindex, setNindex] = useState(0)\r\n    const [fx, setFx] = useState(0)\r\n    const [x, setX] = useState({})\r\n    const [y, setY] = useState({})\r\n    const [index, setIndex] = useState({})\r\n    const [ans, setAns] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Newton's divided-differences</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"N\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setN(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"X\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`x${i}`}\r\n                                        id={`x${i}`}\r\n                                        onChange={(e) => {\r\n                                            setX({\r\n                                                ...x,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Y\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Y :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`y${i}`}\r\n                                        id={`y${i}`}\r\n                                        onChange={(e) => {\r\n                                            setY({\r\n                                                ...y,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Nindex\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N index :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setNindex(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"index\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Index :\r\n                        </Form.Label>\r\n                        {Nindex > 0 &&\r\n                            Nindex <= 10 &&\r\n                            Array.from(Array(Nindex), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`index${i}`}\r\n                                        id={`index${i}`}\r\n                                        onChange={(e) => {\r\n                                            setIndex({\r\n                                                ...index,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"fx\">\r\n                        <Form.Label column sm=\"2\">\r\n                            F(x) :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                onChange={(e) => {\r\n                                    setFx(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/interpolationandextrapolation/newtondivided',\r\n                                    { x, y, index, fx }\r\n                                )\r\n                                setAns(JSON.parse(res.request.response))\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {ans != null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Result</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{JSON.stringify(ans.ans)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Newtondivided\r\n","import Newtondivided from '../../components/InterpolationandExtrapolation/Newtondivided'\r\nconst NewtondividedPage = () => {\r\n    return (\r\n        <div>\r\n            <Newtondivided />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewtondividedPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Lagrangepolynomials = () => {\r\n    const [N, setN] = useState(0)\r\n    const [fx, setFx] = useState(1)\r\n    const [x, setX] = useState({})\r\n    const [y, setY] = useState({})\r\n    const [ans, setAns] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Lagrange polynomials</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"N\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setN(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"X\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`x${i}`}\r\n                                        id={`x${i}`}\r\n                                        onChange={(e) => {\r\n                                            setX({\r\n                                                ...x,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Y\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Y :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`y${i}`}\r\n                                        id={`y${i}`}\r\n                                        onChange={(e) => {\r\n                                            setY({\r\n                                                ...y,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"fx\">\r\n                        <Form.Label column sm=\"2\">\r\n                            F(x) :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                onChange={(e) => {\r\n                                    setFx(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/interpolationandextrapolation/lagrangepolynomials',\r\n                                    { x, y, fx }\r\n                                )\r\n                                setAns(JSON.parse(res.request.response))\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {ans != null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Result</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{JSON.stringify(ans.ans)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lagrangepolynomials\r\n","import Lagrangepolynomials from '../../components/InterpolationandExtrapolation/Lagrangepolynomials'\r\nconst LagrangepolynomialsPage = () => {\r\n    return (\r\n        <div>\r\n            <Lagrangepolynomials />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LagrangepolynomialsPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Splineinterpolation = () => {\r\n    const [N, setN] = useState(0)\r\n    const [x, setX] = useState({})\r\n    const [y, setY] = useState({})\r\n    const [ans, setAns] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Spline interpolation</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setN(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"X\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`x${i}`}\r\n                                        id={`x${i}`}\r\n                                        onChange={(e) => {\r\n                                            setX({\r\n                                                ...x,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Y\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Y :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`y${i}`}\r\n                                        id={`y${i}`}\r\n                                        onChange={(e) => {\r\n                                            setY({\r\n                                                ...y,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/leastsquaresregression/polynomialregression',\r\n                                    { x, y }\r\n                                )\r\n                                setAns(JSON.parse(res.request.response))\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {ans != null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Equation</th>\r\n                                    <th>Result</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{JSON.stringify(ans.data.string)}</td>\r\n                                    <td>{JSON.stringify(ans.ans)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Splineinterpolation\r\n","import Splineinterpolation from '../../components/InterpolationandExtrapolation/Splineinterpolation'\r\nconst SplineinterpolationPage = () => {\r\n    return (\r\n        <div>\r\n            <Splineinterpolation />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplineinterpolationPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst LinearRegression = () => {\r\n    const [N, setN] = useState(0)\r\n    const [prediction, setPrediction] = useState(0)\r\n    const [x, setX] = useState({})\r\n    const [y, setY] = useState({})\r\n    const [ans, setAns] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Linear Regression</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setN(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"X\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`x${i}`}\r\n                                        id={`x${i}`}\r\n                                        onChange={(e) => {\r\n                                            setX({\r\n                                                ...x,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Y\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Y :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`y${i}`}\r\n                                        id={`y${i}`}\r\n                                        onChange={(e) => {\r\n                                            setY({\r\n                                                ...y,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Prediction\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Prediction :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                onChange={(e) => {\r\n                                    setPrediction(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/leastsquaresregression/linearregression',\r\n                                    { x, y, prediction }\r\n                                )\r\n                                setAns(JSON.parse(res.request.response))\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {ans != null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Equation</th>\r\n                                    <th>Result</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{JSON.stringify(ans.data.string)}</td>\r\n                                    <td>{JSON.stringify(ans.ans[1])}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearRegression\r\n","import LinearRegression from '../../components/LeastSquaresRegression/LinearRegression'\r\nconst LinearRegressionPage = () => {\r\n    return (\r\n        <div>\r\n            <LinearRegression />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearRegressionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst PolynomialRegression = () => {\r\n    const [N, setN] = useState(0)\r\n    const [order, setOrder] = useState(0)\r\n    const [x, setX] = useState({})\r\n    const [y, setY] = useState({})\r\n    const [ans, setAns] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Polynomial Regression</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setN(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"X\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`x${i}`}\r\n                                        id={`x${i}`}\r\n                                        onChange={(e) => {\r\n                                            setX({\r\n                                                ...x,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Y\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Y :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`y${i}`}\r\n                                        id={`y${i}`}\r\n                                        onChange={(e) => {\r\n                                            setY({\r\n                                                ...y,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Prediction\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Order :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                onChange={(e) => {\r\n                                    setOrder(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/leastsquaresregression/polynomialregression',\r\n                                    { x, y, order }\r\n                                )\r\n                                setAns(JSON.parse(res.request.response))\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {ans != null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Equation</th>\r\n                                    <th>Result</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{JSON.stringify(ans.data.string)}</td>\r\n                                    <td>{JSON.stringify(ans.ans)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PolynomialRegression\r\n","import PolynomialRegression from '../../components/LeastSquaresRegression/PolynomialRegression'\r\nconst PolynomialRegressionPage = () => {\r\n    return (\r\n        <div>\r\n            <PolynomialRegression />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PolynomialRegressionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst MultipleLinearRegression = () => {\r\n    const [N, setN] = useState(0)\r\n    const [order, setOrder] = useState(0)\r\n    const [x, setX] = useState({})\r\n    const [y, setY] = useState({})\r\n    const [ans, setAns] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 bg-dark text-white shadow\">\r\n                <h2>Multiple Linear Regression</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            N :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                placeholder=\"1-10\"\r\n                                onChange={(e) => {\r\n                                    setN(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"X\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`x${i}`}\r\n                                        id={`x${i}`}\r\n                                        onChange={(e) => {\r\n                                            setX({\r\n                                                ...x,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Y\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Y :\r\n                        </Form.Label>\r\n                        {N > 0 &&\r\n                            N <= 10 &&\r\n                            Array.from(Array(N), (r, i) => (\r\n                                <Col key={i}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        placeholder={`y${i}`}\r\n                                        id={`y${i}`}\r\n                                        onChange={(e) => {\r\n                                            setY({\r\n                                                ...y,\r\n                                                [e.target.id]: parseFloat(\r\n                                                    e.target.value\r\n                                                ),\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Prediction\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Order :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                onChange={(e) => {\r\n                                    setOrder(parseInt(e.target.value))\r\n                                }}\r\n                                required\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/leastsquaresregression/polynomialregression',\r\n                                    { x, y, order }\r\n                                )\r\n                                setAns(JSON.parse(res.request.response))\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {ans != null && (\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Equation</th>\r\n                                    <th>Result</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{JSON.stringify(ans.data.string)}</td>\r\n                                    <td>{JSON.stringify(ans.ans)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MultipleLinearRegression\r\n","import MultipleLinearRegression from '../../components/LeastSquaresRegression/MultipleLinearRegression'\r\nconst MultipleLinearRegressionPage = () => {\r\n    return (\r\n        <div>\r\n            <MultipleLinearRegression />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MultipleLinearRegressionPage\r\n","export default __webpack_public_path__ + \"static/media/icon.ff6bcf56.png\";","import { Nav, Navbar, NavDropdown, Form, Button } from 'react-bootstrap'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport icon from '../images/icon.png'\r\nconst NavBar = () => {\r\n    return (\r\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" sticky=\"top\">\r\n            <NavLink to=\"/\" className=\"nav-link\">\r\n                <Navbar.Brand>\r\n                    <img\r\n                        src={icon}\r\n                        width=\"30\"\r\n                        height=\"30\"\r\n                        className=\"d-inline-block align-top\"\r\n                        alt=\"logo\"\r\n                    />\r\n                </Navbar.Brand>\r\n            </NavLink>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <NavDropdown\r\n                        title=\"Roots of Equations\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/Bisection\">\r\n                            Bisection Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/FalsePosition\">\r\n                            False-Position Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/OnePoint\">\r\n                            One-Point Iteration Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/NewtonRaphson\">\r\n                            Newton-Raphson Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Secant\">\r\n                            Secant Method\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <NavDropdown\r\n                        title=\"Linear Algebraic Equations\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/Cramer\">\r\n                            Cramer's rule\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/GaussElimination\">\r\n                            Gauss-Elimination Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/GaussJordan\">\r\n                            Gauss-Jordan Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/LUdecomposition\">\r\n                            LU decomposition Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item as={Link} to=\"/JacobiIteration\">\r\n                            Jacobi Iteration Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Gaussseidel\">\r\n                            Gauss-seidel\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/ConjugateGradient\">\r\n                            Conjugate Gradient Method\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n\r\n                    <NavDropdown\r\n                        title=\"Interpolation and Extrapolation\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/Newtondivided\">\r\n                            Newton's divided-differences\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Lagrangepolynomials\">\r\n                            Lagrange polynomials\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Splineinterpolation\">\r\n                            Spline interpolation\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n\r\n                    <NavDropdown\r\n                        title=\"Least-Squares Regression\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/LinearRegression\">\r\n                            Linear Regression\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/PolynomialRegression\">\r\n                            Polynomial Regression\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item\r\n                            as={Link}\r\n                            to=\"/MultipleLinearRegression\"\r\n                        >\r\n                            Multiple Linear Regression\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Form inline>\r\n                    <Button\r\n                        variant=\"outline-info\"\r\n                        href=\"https://github.com/TheBossTH/numerical-react\"\r\n                        target=\"_blank\"\r\n                    >\r\n                        Github\r\n                    </Button>\r\n                </Form>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default NavBar\r\n","import IndexPage from './pages/IndexPage'\r\nimport BisectionPage from './pages/RootsOfEquations/BisectionPage'\r\nimport FalsePositionPage from './pages/RootsOfEquations/FalsePositionPage'\r\nimport OnePointPage from './pages/RootsOfEquations/OnePointPage'\r\nimport NewtonRaphsonPage from './pages/RootsOfEquations/NewtonRaphsonPage.js'\r\nimport SecantPage from './pages/RootsOfEquations/SecantPage'\r\n\r\nimport CramerPage from './pages/LinearAlgebraicEquations/CramerPage'\r\nimport GaussEliminationPage from './pages/LinearAlgebraicEquations/GaussEliminationPage'\r\nimport GaussJordanPage from './pages/LinearAlgebraicEquations/GaussJordanPage'\r\nimport LUdecompositionPage from './pages/LinearAlgebraicEquations/LUdecompositionPage'\r\nimport JacobiIterationPage from './pages/LinearAlgebraicEquations/JacobiIterationPage'\r\nimport GaussseidelPage from './pages/LinearAlgebraicEquations/GaussseidelPage'\r\nimport ConjugateGradientPage from './pages/LinearAlgebraicEquations/ConjugateGradientPage'\r\n\r\nimport NewtondividedPage from './pages/InterpolationandExtrapolation/NewtondividedPage'\r\nimport LagrangepolynomialsPage from './pages/InterpolationandExtrapolation/LagrangepolynomialsPage'\r\nimport SplineinterpolationPage from './pages/InterpolationandExtrapolation/SplineinterpolationPage'\r\n\r\nimport LinearRegressionPage from './pages/LeastSquaresRegression/LinearRegressionPage'\r\nimport PolynomialRegressionPage from './pages/LeastSquaresRegression/PolynomialRegressionPage'\r\nimport MultipleLinearRegressionPage from './pages/LeastSquaresRegression/MultipleLinearRegressionPage'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport NavBar from './components/NavBar'\r\n// import Sidebar from './components/Sidebar'\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <NavBar />\r\n            {/* <Sidebar /> */}\r\n            <Switch>\r\n                <Route exact path={'/'}>\r\n                    <IndexPage />\r\n                </Route>\r\n                <Route path={'/Bisection'}>\r\n                    <BisectionPage />\r\n                </Route>\r\n                <Route path={'/FalsePosition'}>\r\n                    <FalsePositionPage />\r\n                </Route>\r\n                <Route path={'/OnePoint'}>\r\n                    <OnePointPage />\r\n                </Route>\r\n                <Route path={'/NewtonRaphson'}>\r\n                    <NewtonRaphsonPage />\r\n                </Route>\r\n                <Route path={'/Secant'}>\r\n                    <SecantPage />\r\n                </Route>\r\n                <Route path={'/Cramer'}>\r\n                    <CramerPage />\r\n                </Route>\r\n                <Route path={'/GaussElimination'}>\r\n                    <GaussEliminationPage />\r\n                </Route>\r\n                <Route path={'/GaussJordan'}>\r\n                    <GaussJordanPage />\r\n                </Route>\r\n                <Route path={'/LUdecomposition'}>\r\n                    <LUdecompositionPage />\r\n                </Route>\r\n                <Route path={'/JacobiIteration'}>\r\n                    <JacobiIterationPage />\r\n                </Route>\r\n                <Route path={'/Gaussseidel'}>\r\n                    <GaussseidelPage />\r\n                </Route>\r\n                <Route path={'/ConjugateGradient'}>\r\n                    <ConjugateGradientPage />\r\n                </Route>\r\n                <Route path={'/Newtondivided'}>\r\n                    <NewtondividedPage />\r\n                </Route>\r\n                <Route path={'/Lagrangepolynomials'}>\r\n                    <LagrangepolynomialsPage />\r\n                </Route>\r\n                <Route path={'/Splineinterpolation'}>\r\n                    <SplineinterpolationPage />\r\n                </Route>\r\n                <Route path={'/LinearRegression'}>\r\n                    <LinearRegressionPage />\r\n                </Route>\r\n                <Route path={'/PolynomialRegression'}>\r\n                    <PolynomialRegressionPage />\r\n                </Route>\r\n                <Route path={'/MultipleLinearRegression'}>\r\n                    <MultipleLinearRegressionPage />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './scss/custom.scss'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}