{"version":3,"sources":["images/Itsuki.gif","components/FormIndex.js","pages/IndexPage.js","components/FormAssignments.js","pages/AssignmentsPage.js","pages/DynamicPage.js","components/FormCounter.js","pages/CounterPage.js","components/FormGraph.js","pages/GraphPage.js","components/RootsOfEquations/Bisection.js","pages/RootsOfEquations/BisectionPage.js","components/RootsOfEquations/FalsePosition.js","pages/RootsOfEquations/FalsePositionPage.js","components/RootsOfEquations/OnePoint.js","pages/RootsOfEquations/OnePointPage.js","components/RootsOfEquations/NewtonRaphson.js","pages/RootsOfEquations/NewtonRaphsonPage.js","components/RootsOfEquations/Secant.js","pages/RootsOfEquations/SecantPage.js","components/LinearAlgebraicEquations/Cramer.js","pages/LinearAlgebraicEquations/CramerPage.js","components/LinearAlgebraicEquations/GaussElimination.js","pages/LinearAlgebraicEquations/GaussEliminationPage.js","components/LinearAlgebraicEquations/GaussJordan.js","pages/LinearAlgebraicEquations/GaussJordanPage.js","components/LinearAlgebraicEquations/LUdecomposition.js","pages/LinearAlgebraicEquations/LUdecompositionPage.js","components/LinearAlgebraicEquations/JacobiIteration.js","pages/LinearAlgebraicEquations/JacobiIterationPage.js","components/LinearAlgebraicEquations/Gaussseidel.js","pages/LinearAlgebraicEquations/GaussseidelPage.js","components/LinearAlgebraicEquations/ConjugateGradient.js","pages/LinearAlgebraicEquations/ConjugateGradientPage.js","components/InterpolationandExtrapolation/Newtondivided.js","pages/InterpolationandExtrapolation/NewtondividedPage.js","components/InterpolationandExtrapolation/Lagrangepolynomials.js","pages/InterpolationandExtrapolation/LagrangepolynomialsPage.js","components/InterpolationandExtrapolation/Splineinterpolation.js","pages/InterpolationandExtrapolation/SplineinterpolationPage.js","components/LeastSquaresRegression/LinearRegression.js","pages/LeastSquaresRegression/LinearRegressionPage.js","components/LeastSquaresRegression/PolynomialRegression.js","pages/LeastSquaresRegression/PolynomialRegressionPage.js","components/LeastSquaresRegression/MultipleLinearRegression.js","pages/LeastSquaresRegression/MultipleLinearRegressionPage.js","images/icon.png","components/NavBar.js","images/bg1.jpg","App.js","reportWebVitals.js","index.js"],"names":["FormHome","Container","className","src","Itsuki","alt","IndexPage","FormIndex","axios","require","default","FormAssignments","useState","username","password","data","setData","isShow","setShow","isSubmit","setSubmit","useEffect","console","log","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","Button","disabled","onClick","a","post","s","config","status","variant","toString","AssignmentsPage","DynamicPage","useParams","name","nickname","FormCounter","numconter","Cout","setCout","CounterPage","FormGraph","labels","datasets","label","fill","backgroundColor","borderColor","options","title","display","text","scales","yAxes","ticks","beginAtZero","GraphPage","Bisection","xl","xr","error","results","setResults","as","Row","column","sm","Col","plaintext","readOnly","defaultValue","parseFloat","span","offset","res","JSON","parse","request","response","Table","striped","bordered","hover","map","r","iteration","xm","er","BisectionPage","FalsePosition","x1","FalsePositionPage","Onepoint","x","xi","OnePointPage","OnePoint","NewtonRaphson","fx","diffx","NewtonRaphsonPage","x0","fx0","fx1","deltax","SecantPage","Secant","Cramer","a11","a12","a13","a21","a22","a23","a31","a32","a33","b1","b2","b3","block","CramerPage","GaussElimination","GaussEliminationPage","GaussJordan","GaussJordanPage","LUdecompositionPage","LUdecomposition","JacobiIteration","imax","x2","x3","erx1","erx2","erx3","JacobiIterationPage","Gaussseidel","GaussseidelPage","ConjugateGradient","l","toFixed","r1","r2","r3","err","a1","d1","d2","d3","ConjugateGradientPage","Newtondivided","NewtondividedPage","Lagrangepolynomials","LagrangepolynomialsPage","Splineinterpolation","SplineinterpolationPage","LinearRegression","LinearRegressionPage","PolynomialRegression","PolynomialRegressionPage","MultipleLinearRegression","MultipleLinearRegressionPage","NavBar","Navbar","bg","expand","sticky","to","Brand","icon","width","height","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","Item","Link","Divider","inline","href","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81171156.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Itsuki.4ffec2bc.gif\";","import { Container } from 'react-bootstrap'\r\nimport Itsuki from '../images/Itsuki.gif'\r\n\r\nconst FormHome = () => {\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light text-center\">\r\n                <h2>Itsuki is No.1 Waifu</h2>\r\n                <br />\r\n                <img src={Itsuki} alt=\"Itsuki\" className=\"rounded img-fluid\" />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormHome\r\n","import FormIndex from '../components/FormIndex'\r\nconst IndexPage = () => {\r\n    return (\r\n        <div>\r\n            <FormIndex />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndexPage\r\n","import { useState, useEffect } from 'react'\r\nimport { Container, Form, Button } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst FormAssignments = () => {\r\n    const [data, setData] = useState({\r\n        username: '',\r\n        password: '',\r\n    })\r\n    const [isShow, setShow] = useState(false)\r\n    const [isSubmit, setSubmit] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('Mount Component')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect : username Change')\r\n    }, [data.username, data.password])\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <Form>\r\n                    <Form.Group controlId=\"Username\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Username\"\r\n                            onChange={(e) => {\r\n                                setData({ ...data, username: e.target.value })\r\n                            }}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"Password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Enter Password\"\r\n                            onChange={(e) => {\r\n                                setData({ ...data, password: e.target.value })\r\n                            }}\r\n                        />\r\n                    </Form.Group>\r\n                    <Button\r\n                        disabled={isSubmit}\r\n                        onClick={async () => {\r\n                            setSubmit(true)\r\n                            const s = await axios.post(\r\n                                'http://localhost:8080/api/v1/users/login',\r\n                                data\r\n                            )\r\n                            console.log(s.config.data)\r\n                            s.status === 200 && setSubmit(false)\r\n                        }}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Form>\r\n                <hr />\r\n                <Button\r\n                    variant=\"outline-secondary\"\r\n                    onClick={() => {\r\n                        setShow(!isShow)\r\n                    }}\r\n                >\r\n                    Click Me\r\n                </Button>\r\n                : {isShow.toString()}\r\n                <br />\r\n                {isShow && (\r\n                    <div>\r\n                        <h1>Username :</h1> {data.username}\r\n                        <br />\r\n                        <h1>Password :</h1> {data.password}\r\n                    </div>\r\n                )}\r\n                <br />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormAssignments\r\n","import FormAssignments from '../components/FormAssignments'\r\nconst AssignmentsPage = () => {\r\n    return (\r\n        <div>\r\n            <FormAssignments />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignmentsPage\r\n","import { useParams } from 'react-router-dom'\r\n\r\nconst DynamicPage = () => {\r\n    const { name, nickname } = useParams()\r\n    return (\r\n        <div>\r\n            <h1>Name : {name}</h1>\r\n            <h1>Nickname : {nickname}</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default DynamicPage\r\n","import { useState, useEffect } from 'react'\r\nimport { Container, Button } from 'react-bootstrap'\r\n\r\nconst FormCounter = () => {\r\n    const [Cout, setCout] = useState({\r\n        numconter: 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Mount Component')\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                {Cout.numconter > 20 ? (\r\n                    <h1 className=\"text-danger\">{Cout.numconter}</h1>\r\n                ) : Cout.numconter < 0 ? (\r\n                    <h1 className=\"text-success\">{Cout.numconter}</h1>\r\n                ) : (\r\n                    <h1>{Cout.numconter}</h1>\r\n                )}\r\n                <Button\r\n                    variant=\"danger\"\r\n                    onClick={() => {\r\n                        setCout({ ...Cout, numconter: Cout.numconter - 1 })\r\n                    }}\r\n                >\r\n                    YAMETE! Senpai(-)\r\n                </Button>\r\n                <Button\r\n                    variant=\"success\"\r\n                    className=\"ml-2\"\r\n                    onClick={() => {\r\n                        setCout({ ...Cout, numconter: Cout.numconter + 1 })\r\n                    }}\r\n                >\r\n                    Notice Me Senpai(+)\r\n                </Button>\r\n                <br />\r\n                <br />\r\n                <h2>Count &gt; 20 = Red</h2>\r\n                <h2>Count &lt; 0 = Green</h2>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormCounter\r\n","import FormCounter from '../components/FormCounter'\r\nconst CounterPage = () => {\r\n    return (\r\n        <div>\r\n            <FormCounter />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterPage\r\n","import { React } from 'react'\r\nimport { Container, Form, Button } from 'react-bootstrap'\r\nimport { Line } from 'react-chartjs-2'\r\nconst FormGraph = () => {\r\n    const data = {\r\n        labels: ['Ichika', 'Nino', 'Miku', 'Yotsuba', 'Itsuki'],\r\n        datasets: [\r\n            {\r\n                label: '# of Waifu Point',\r\n                data: [10, 15, 18, 8, 20],\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ],\r\n    }\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'Waifu Chart',\r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h1>Graph</h1>\r\n                <p>This is a Graph</p>\r\n                <Form>\r\n                    <Form.Group controlId=\"WaifuName\">\r\n                        <Form.Label>Add Waifu</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Waiful Name\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"WaifulPoint\">\r\n                        <Form.Control\r\n                            type=\"number\"\r\n                            placeholder=\"Enter Waiful Point\"\r\n                        />\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Add\r\n                    </Button>\r\n                </Form>\r\n                <Line data={data} options={options} />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormGraph\r\n","import FormGraph from '../components/FormGraph'\r\nconst GraphPage = () => {\r\n    return (\r\n        <div>\r\n            <FormGraph />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GraphPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Bisection = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Bisection Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bisection\r\n","import Bisection from '../../components/RootsOfEquations/Bisection'\r\nconst BisectionPage = () => {\r\n    return (\r\n        <div>\r\n            <Bisection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BisectionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst FalsePosition = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>False-Position Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/falseposition',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>X1</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.x1}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FalsePosition\r\n","import FalsePosition from '../../components/RootsOfEquations/FalsePosition'\r\nconst FalsePositionPage = () => {\r\n    return (\r\n        <div>\r\n            <FalsePosition />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FalsePositionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Onepoint = () => {\r\n    const [data, setData] = useState({\r\n        x: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>One-Point Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(1/4)+(x/2)\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X Start :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X Start\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/onepoint',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>X</th>\r\n                                    <th>Xi</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.x}</td>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Onepoint\r\n","import OnePoint from '../../components/RootsOfEquations/OnePoint'\r\nconst OnePointPage = () => {\r\n    return (\r\n        <div>\r\n            <OnePoint />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OnePointPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst NewtonRaphson = () => {\r\n    const [data, setData] = useState({\r\n        x: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Newton-Raphson Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^2)-7\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X Start :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X Start\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/newtonraphson',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>Xi</th>\r\n                                    <th>FX</th>\r\n                                    <th>diff(FX)</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.fx}</td>\r\n                                        <td>{r.diffx}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewtonRaphson\r\n","import NewtonRaphson from '../../components/RootsOfEquations/NewtonRaphson'\r\nconst NewtonRaphsonPage = () => {\r\n    return (\r\n        <div>\r\n            <NewtonRaphson />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewtonRaphsonPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Onepoint = () => {\r\n    const [data, setData] = useState({\r\n        x: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Secant Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^2)-7\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X0 :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X0\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x0: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X1 :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"X1\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/secant',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>X0</th>\r\n                                    <th>X1</th>\r\n                                    <th>FX0</th>\r\n                                    <th>FX1</th>\r\n                                    <th>DeltaX</th>\r\n                                    <th>Xi</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.x0}</td>\r\n                                        <td>{r.x1}</td>\r\n                                        <td>{r.fx0}</td>\r\n                                        <td>{r.fx1}</td>\r\n                                        <td>{r.deltax}</td>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Onepoint\r\n","import Secant from '../../components/RootsOfEquations/Secant'\r\nconst SecantPage = () => {\r\n    return (\r\n        <div>\r\n            <Secant />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SecantPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Cramer = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Cramer's rule</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/cramer',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.x}>\r\n                                        <td>{r.x}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cramer\r\n","import Cramer from '../../components/LinearAlgebraicEquations/Cramer'\r\nconst CramerPage = () => {\r\n    return (\r\n        <div>\r\n            <Cramer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CramerPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst GaussElimination = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 rounded bg-light\">\r\n                <h2>Gauss Elimination Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/gausselimination',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.xi}>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussElimination\r\n","import GaussElimination from '../../components/LinearAlgebraicEquations/GaussElimination'\r\nconst GaussEliminationPage = () => {\r\n    return (\r\n        <div>\r\n            <GaussElimination />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussEliminationPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst GaussJordan = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 rounded bg-light\">\r\n                <h2>Gauss-Jordan Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/gaussjordan',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.xi}>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussJordan\r\n","import GaussJordan from '../../components/LinearAlgebraicEquations/GaussJordan'\r\nconst GaussJordanPage = () => {\r\n    return (\r\n        <div>\r\n            <GaussJordan />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussJordanPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst GaussJordan = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 rounded bg-light\">\r\n                <h2>LU decomposition Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/ludecomposition',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>X</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.xi}>\r\n                                        <td>{r.xi}</td>\r\n                                        <td>{r.value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussJordan\r\n","import LUdecomposition from '../../components/LinearAlgebraicEquations/LUdecomposition'\r\nconst LUdecompositionPage = () => {\r\n    return (\r\n        <div>\r\n            <LUdecomposition />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LUdecompositionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst JacobiIteration = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n        imax: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 rounded bg-light\">\r\n                <h2>Jacobi Iteration Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/jacobiiteration',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>X1</th>\r\n                                    <th>X2</th>\r\n                                    <th>X3</th>\r\n                                    <th>ErrorX1</th>\r\n                                    <th>ErrorX2</th>\r\n                                    <th>ErrorX3</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.x1}</td>\r\n                                        <td>{r.x2}</td>\r\n                                        <td>{r.x3}</td>\r\n                                        <td>{r.erx1}</td>\r\n                                        <td>{r.erx2}</td>\r\n                                        <td>{r.erx3}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JacobiIteration\r\n","import JacobiIteration from '../../components/LinearAlgebraicEquations/JacobiIteration'\r\nconst JacobiIterationPage = () => {\r\n    return (\r\n        <div>\r\n            <JacobiIteration />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JacobiIterationPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Gaussseidel = () => {\r\n    const [data, setData] = useState({\r\n        a11: 0,\r\n        a12: 0,\r\n        a13: 0,\r\n        a21: 0,\r\n        a22: 0,\r\n        a23: 0,\r\n        a31: 0,\r\n        a32: 0,\r\n        a33: 0,\r\n        b1: 0,\r\n        b2: 0,\r\n        b3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 rounded bg-light\">\r\n                <h2>Gauss-seidel</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/gaussseidel',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>X1</th>\r\n                                    <th>X2</th>\r\n                                    <th>X3</th>\r\n                                    <th>ErrorX1</th>\r\n                                    <th>ErrorX2</th>\r\n                                    <th>ErrorX3</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.x1}</td>\r\n                                        <td>{r.x2}</td>\r\n                                        <td>{r.x3}</td>\r\n                                        <td>{r.erx1}</td>\r\n                                        <td>{r.erx2}</td>\r\n                                        <td>{r.erx3}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gaussseidel\r\n","import Gaussseidel from '../../components/LinearAlgebraicEquations/Gaussseidel'\r\nconst GaussseidelPage = () => {\r\n    return (\r\n        <div>\r\n            <Gaussseidel />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GaussseidelPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst ConjugateGradient = () => {\r\n    const [data, setData] = useState({\r\n        a11: 14,\r\n        a12: 4,\r\n        a13: -16,\r\n        a21: 4,\r\n        a22: 29,\r\n        a23: -19,\r\n        a31: -16,\r\n        a32: -19,\r\n        a33: 27,\r\n        b1: -22,\r\n        b2: 35,\r\n        b3: 5,\r\n        x1: 0,\r\n        x2: 0,\r\n        x3: 0,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5  p-4 rounded bg-light\">\r\n                <h2>Conjugate Gradient Method</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            A :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a11: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a12: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a13: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a21: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a22: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a23: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a31: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a32: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        a33: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            B :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        b3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"B\">\r\n                        <Form.Label column sm=\"2\">\r\n                            X :\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x1: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x2: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        x3: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Button\r\n                            block\r\n                            type=\"button\"\r\n                            onClick={async () => {\r\n                                const res = await axios.post(\r\n                                    'http://localhost:8080/api/v1/root/conjugategradient',\r\n                                    data\r\n                                )\r\n                                console.log(res)\r\n                                setResults(\r\n                                    JSON.parse(res.request.response).data\r\n                                )\r\n                            }}\r\n                        >\r\n                            Calculate\r\n                        </Button>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>L</th>\r\n                                    <th>X1</th>\r\n                                    <th>X2</th>\r\n                                    <th>X3</th>\r\n                                    <th>R1</th>\r\n                                    <th>R2</th>\r\n                                    <th>R3</th>\r\n                                    <th>Error</th>\r\n                                    <th>A</th>\r\n                                    <th>D1</th>\r\n                                    <th>D2</th>\r\n                                    <th>D3</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{parseFloat(r.l.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.x1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.x2.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.x3.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.r1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.r2.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.r3.toFixed(5))}</td>\r\n                                        <td>{r.err}</td>\r\n                                        <td>{parseFloat(r.a1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.d1.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.d2.toFixed(5))}</td>\r\n                                        <td>{parseFloat(r.d3.toFixed(5))}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConjugateGradient\r\n","import ConjugateGradient from '../../components/LinearAlgebraicEquations/ConjugateGradient'\r\nconst ConjugateGradientPage = () => {\r\n    return (\r\n        <div>\r\n            <ConjugateGradient />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConjugateGradientPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Newtondivided = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Newton's divided-differences</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Newtondivided\r\n","import Newtondivided from '../../components/InterpolationandExtrapolation/Newtondivided'\r\nconst NewtondividedPage = () => {\r\n    return (\r\n        <div>\r\n            <Newtondivided />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewtondividedPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Lagrangepolynomials = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Lagrange polynomials</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lagrangepolynomials\r\n","import Lagrangepolynomials from '../../components/InterpolationandExtrapolation/Lagrangepolynomials'\r\nconst LagrangepolynomialsPage = () => {\r\n    return (\r\n        <div>\r\n            <Lagrangepolynomials />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LagrangepolynomialsPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst Splineinterpolation = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Spline interpolation</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Splineinterpolation\r\n","import Splineinterpolation from '../../components/InterpolationandExtrapolation/Splineinterpolation'\r\nconst SplineinterpolationPage = () => {\r\n    return (\r\n        <div>\r\n            <Splineinterpolation />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplineinterpolationPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst LinearRegression = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Linear Regression</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearRegression\r\n","import LinearRegression from '../../components/LeastSquaresRegression/LinearRegression'\r\nconst LinearRegressionPage = () => {\r\n    return (\r\n        <div>\r\n            <LinearRegression />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearRegressionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst PolynomialRegression = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Polynomial Regression</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PolynomialRegression\r\n","import PolynomialRegression from '../../components/LeastSquaresRegression/PolynomialRegression'\r\nconst PolynomialRegressionPage = () => {\r\n    return (\r\n        <div>\r\n            <PolynomialRegression />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PolynomialRegressionPage\r\n","import { useState } from 'react'\r\nimport { Container, Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nconst axios = require('axios').default\r\n\r\nconst MultipleLinearRegression = () => {\r\n    const [data, setData] = useState({\r\n        xl: 0,\r\n        xr: 0,\r\n        error: 0.00001,\r\n    })\r\n    const [results, setResults] = useState(null)\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-5 p-4 rounded bg-light\">\r\n                <h2>Multiple Linear Regression</h2>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"Equation\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Equation :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                plaintext\r\n                                readOnly\r\n                                defaultValue=\"(x^4)-13\"\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XL\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XL :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XL\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xl: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"XR\">\r\n                        <Form.Label column sm=\"2\">\r\n                            XR :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"XR\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        xr: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"Error\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Error :\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"Error\"\r\n                                onChange={(e) => {\r\n                                    setData({\r\n                                        ...data,\r\n                                        error: parseFloat(e.target.value),\r\n                                    })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={async () => {\r\n                                    const res = await axios.post(\r\n                                        'http://localhost:8080/api/v1/root/bisection',\r\n                                        data\r\n                                    )\r\n                                    console.log(res)\r\n                                    setResults(\r\n                                        JSON.parse(res.request.response).data\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Calculate\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    {results !== null && (\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Iteration</th>\r\n                                    <th>XL</th>\r\n                                    <th>XR</th>\r\n                                    <th>XM</th>\r\n                                    <th>ER</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.map((r) => (\r\n                                    <tr key={r.iteration}>\r\n                                        <td>{r.iteration}</td>\r\n                                        <td>{r.xl}</td>\r\n                                        <td>{r.xr}</td>\r\n                                        <td>{r.xm}</td>\r\n                                        <td>{r.er}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MultipleLinearRegression\r\n","import MultipleLinearRegression from '../../components/LeastSquaresRegression/MultipleLinearRegression'\r\nconst MultipleLinearRegressionPage = () => {\r\n    return (\r\n        <div>\r\n            <MultipleLinearRegression />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MultipleLinearRegressionPage\r\n","export default __webpack_public_path__ + \"static/media/icon.ff6bcf56.png\";","import { Nav, Navbar, NavDropdown, Form, Button } from 'react-bootstrap'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport icon from '../images/icon.png'\r\nconst NavBar = () => {\r\n    return (\r\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" sticky=\"top\">\r\n            <NavLink to=\"/\" className=\"nav-link\">\r\n                <Navbar.Brand>\r\n                    <img\r\n                        src={icon}\r\n                        width=\"30\"\r\n                        height=\"30\"\r\n                        className=\"d-inline-block align-top\"\r\n                        alt=\"logo\"\r\n                    />\r\n                </Navbar.Brand>\r\n            </NavLink>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <NavDropdown\r\n                        title=\"Roots of Equations\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/Bisection\">\r\n                            Bisection Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/FalsePosition\">\r\n                            False-Position Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/OnePoint\">\r\n                            One-Point Iteration Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/NewtonRaphson\">\r\n                            Newton-Raphson Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Secant\">\r\n                            Secant Method\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <NavDropdown\r\n                        title=\"Linear Algebraic Equations\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/Cramer\">\r\n                            Cramer's rule\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/GaussElimination\">\r\n                            Gauss-Elimination Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/GaussJordan\">\r\n                            Gauss-Jordan Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/LUdecomposition\">\r\n                            LU decomposition Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item as={Link} to=\"/JacobiIteration\">\r\n                            Jacobi Iteration Method\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Gaussseidel\">\r\n                            Gauss-seidel\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/ConjugateGradient\">\r\n                            Conjugate Gradient Method\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n\r\n                    <NavDropdown\r\n                        title=\"Interpolation and Extrapolation\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/Newtondivided\">\r\n                            Newton's divided-differences\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Lagrangepolynomials\">\r\n                            Lagrange polynomials\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/Splineinterpolation\">\r\n                            Spline interpolation\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n\r\n                    <NavDropdown\r\n                        title=\"Least-Squares Regression\"\r\n                        id=\"collasible-nav-dropdown\"\r\n                    >\r\n                        <NavDropdown.Item as={Link} to=\"/LinearRegression\">\r\n                            Linear Regression\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/PolynomialRegression\">\r\n                            Polynomial Regression\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item\r\n                            as={Link}\r\n                            to=\"/MultipleLinearRegression\"\r\n                        >\r\n                            Multiple Linear Regression\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n\r\n                    <NavLink to=\"/assignments\" className=\"nav-link\">\r\n                        Assignments\r\n                    </NavLink>\r\n                    <NavLink to=\"/counter\" className=\"nav-link\">\r\n                        Counter(not Strike)\r\n                    </NavLink>\r\n                    <NavLink to=\"/graph\" className=\"nav-link\">\r\n                        Graph\r\n                    </NavLink>\r\n                </Nav>\r\n                <Form inline>\r\n                    <Button\r\n                        variant=\"outline-info\"\r\n                        href=\"https://github.com/TheBossTH/numerical-react\"\r\n                        target=\"_blank\"\r\n                    >\r\n                        Github\r\n                    </Button>\r\n                </Form>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default NavBar\r\n","export default __webpack_public_path__ + \"static/media/bg1.93d19a24.jpg\";","import IndexPage from './pages/IndexPage'\r\nimport AssignmentsPage from './pages/AssignmentsPage'\r\nimport DynamicPage from './pages/DynamicPage'\r\nimport CounterPage from './pages/CounterPage'\r\nimport GraphPage from './pages/GraphPage'\r\nimport BisectionPage from './pages/RootsOfEquations/BisectionPage'\r\nimport FalsePositionPage from './pages/RootsOfEquations/FalsePositionPage'\r\nimport OnePointPage from './pages/RootsOfEquations/OnePointPage'\r\nimport NewtonRaphsonPage from './pages/RootsOfEquations/NewtonRaphsonPage.js'\r\nimport SecantPage from './pages/RootsOfEquations/SecantPage'\r\n\r\nimport CramerPage from './pages/LinearAlgebraicEquations/CramerPage'\r\nimport GaussEliminationPage from './pages/LinearAlgebraicEquations/GaussEliminationPage'\r\nimport GaussJordanPage from './pages/LinearAlgebraicEquations/GaussJordanPage'\r\nimport LUdecompositionPage from './pages/LinearAlgebraicEquations/LUdecompositionPage'\r\nimport JacobiIterationPage from './pages/LinearAlgebraicEquations/JacobiIterationPage'\r\nimport GaussseidelPage from './pages/LinearAlgebraicEquations/GaussseidelPage'\r\nimport ConjugateGradientPage from './pages/LinearAlgebraicEquations/ConjugateGradientPage'\r\n\r\nimport NewtondividedPage from './pages/InterpolationandExtrapolation/NewtondividedPage'\r\nimport LagrangepolynomialsPage from './pages/InterpolationandExtrapolation/LagrangepolynomialsPage'\r\nimport SplineinterpolationPage from './pages/InterpolationandExtrapolation/SplineinterpolationPage'\r\n\r\nimport LinearRegressionPage from './pages/LeastSquaresRegression/LinearRegressionPage'\r\nimport PolynomialRegressionPage from './pages/LeastSquaresRegression/PolynomialRegressionPage'\r\nimport MultipleLinearRegressionPage from './pages/LeastSquaresRegression/MultipleLinearRegressionPage'\r\n\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport NavBar from './components/NavBar'\r\nimport Sidebar from './components/Sidebar'\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <NavBar />\r\n            {/* <Sidebar /> */}\r\n            <Switch>\r\n                <Route exact path={'/'}>\r\n                    <IndexPage />\r\n                </Route>\r\n                <Route path={'/Bisection'}>\r\n                    <BisectionPage />\r\n                </Route>\r\n                <Route path={'/FalsePosition'}>\r\n                    <FalsePositionPage />\r\n                </Route>\r\n                <Route path={'/OnePoint'}>\r\n                    <OnePointPage />\r\n                </Route>\r\n                <Route path={'/NewtonRaphson'}>\r\n                    <NewtonRaphsonPage />\r\n                </Route>\r\n                <Route path={'/Secant'}>\r\n                    <SecantPage />\r\n                </Route>\r\n                <Route path={'/Cramer'}>\r\n                    <CramerPage />\r\n                </Route>\r\n                <Route path={'/GaussElimination'}>\r\n                    <GaussEliminationPage />\r\n                </Route>\r\n                <Route path={'/GaussJordan'}>\r\n                    <GaussJordanPage />\r\n                </Route>\r\n                <Route path={'/LUdecomposition'}>\r\n                    <LUdecompositionPage />\r\n                </Route>\r\n                <Route path={'/JacobiIteration'}>\r\n                    <JacobiIterationPage />\r\n                </Route>\r\n                <Route path={'/Gaussseidel'}>\r\n                    <GaussseidelPage />\r\n                </Route>\r\n                <Route path={'/ConjugateGradient'}>\r\n                    <ConjugateGradientPage />\r\n                </Route>\r\n                <Route path={'/Newtondivided'}>\r\n                    <NewtondividedPage />\r\n                </Route>\r\n                <Route path={'/Lagrangepolynomials'}>\r\n                    <LagrangepolynomialsPage />\r\n                </Route>\r\n                <Route path={'/Splineinterpolation'}>\r\n                    <SplineinterpolationPage />\r\n                </Route>\r\n                <Route path={'/LinearRegression'}>\r\n                    <LinearRegressionPage />\r\n                </Route>\r\n                <Route path={'/PolynomialRegression'}>\r\n                    <PolynomialRegressionPage />\r\n                </Route>\r\n                <Route path={'/MultipleLinearRegression'}>\r\n                    <MultipleLinearRegressionPage />\r\n                </Route>\r\n\r\n                <Route path={'/assignments'}>\r\n                    <AssignmentsPage />\r\n                </Route>\r\n                <Route path={'/counter'}>\r\n                    <CounterPage />\r\n                </Route>\r\n                <Route path={'/graph'}>\r\n                    <GraphPage />\r\n                </Route>\r\n                <Route path={'/:name/:nickname'}>\r\n                    <DynamicPage />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}